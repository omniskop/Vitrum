// Code generated by vitrum gencmd. DO NOT EDIT.

package pdf

import (
	"fmt"
	vit "github.com/omniskop/vitrum/vit"
	parse "github.com/omniskop/vitrum/vit/parse"
	std "github.com/omniskop/vitrum/vit/std"
)

func newFileContextForPageComponent(globalCtx *vit.GlobalContext) (*vit.FileContext, error) {
	fileCtx := vit.NewFileContext(globalCtx)

	var lib parse.Library
	var err error
	lib, err = parse.ResolveLibrary([]string{"Vit"})
	if err != nil {
		// The file used to generate the "PageComponent" component imported a library called "Vit".
		// If this error occurs that imported failed. Probably because the library is not known.
		return nil, fmt.Errorf("unable to create file context for generated \"PageComponent\" component: %w", err)
	}
	parse.AddLibraryToContainer(lib, &fileCtx.KnownComponents)

	return fileCtx, nil
}

type PageComponent_Format uint

const (
	PageComponent_Format_A0  PageComponent_Format = 0
	PageComponent_Format_A1  PageComponent_Format = 1
	PageComponent_Format_A2  PageComponent_Format = 2
	PageComponent_Format_A3  PageComponent_Format = 3
	PageComponent_Format_A4  PageComponent_Format = 4
	PageComponent_Format_A5  PageComponent_Format = 5
	PageComponent_Format_A6  PageComponent_Format = 6
	PageComponent_Format_A7  PageComponent_Format = 7
	PageComponent_Format_A8  PageComponent_Format = 8
	PageComponent_Format_A9  PageComponent_Format = 9
	PageComponent_Format_A10 PageComponent_Format = 10
)

func (enum PageComponent_Format) String() string {
	switch enum {
	case PageComponent_Format_A0:
		return "A0"
	case PageComponent_Format_A1:
		return "A1"
	case PageComponent_Format_A2:
		return "A2"
	case PageComponent_Format_A3:
		return "A3"
	case PageComponent_Format_A4:
		return "A4"
	case PageComponent_Format_A5:
		return "A5"
	case PageComponent_Format_A6:
		return "A6"
	case PageComponent_Format_A7:
		return "A7"
	case PageComponent_Format_A8:
		return "A8"
	case PageComponent_Format_A9:
		return "A9"
	case PageComponent_Format_A10:
		return "A10"
	default:
		return "<unknownFormat>"
	}
}

type PageComponent_Orientation uint

const (
	PageComponent_Orientation_Portrait  PageComponent_Orientation = 0
	PageComponent_Orientation_Landscape PageComponent_Orientation = 1
)

func (enum PageComponent_Orientation) String() string {
	switch enum {
	case PageComponent_Orientation_Portrait:
		return "Portrait"
	case PageComponent_Orientation_Landscape:
		return "Landscape"
	default:
		return "<unknownOrientation>"
	}
}

type PageComponent struct {
	*std.Item
	id string

	format      vit.IntValue
	orientation vit.IntValue
	color       vit.ColorValue
}

// newPageComponentInGlobal creates an appropriate file context for the component and then returns a new PageComponent instance.
// The returned error will only be set if a library import that is required by the component fails.
func newPageComponentInGlobal(id string, globalCtx *vit.GlobalContext, thisLibrary parse.Library) (*PageComponent, error) {
	fileCtx, err := newFileContextForPageComponent(globalCtx)
	if err != nil {
		return nil, err
	}
	parse.AddLibraryToContainer(thisLibrary, &fileCtx.KnownComponents)
	return NewPageComponent(id, fileCtx), nil
}
func NewPageComponent(id string, context *vit.FileContext) *PageComponent {
	p := &PageComponent{
		Item:        std.NewItem("", context),
		id:          id,
		format:      *vit.NewEmptyIntValue(),
		orientation: *vit.NewEmptyIntValue(),
		color:       *vit.NewColorValueFromCode(vit.Code{FileCtx: context, Code: "Vit.rgb(255, 255, 255)", Position: nil}),
	}
	// property assignments on embedded components
	// register listeners for when a property changes
	p.format.AddDependent(vit.FuncDep(p.sizeChanged))
	p.orientation.AddDependent(vit.FuncDep(p.sizeChanged))
	// register event listeners
	// register enumerations
	p.DefineEnum(vit.Enumeration{
		Embedded: true,
		Name:     "Format",
		Position: nil,
		Values:   map[string]int{"A0": 0, "A1": 1, "A2": 2, "A3": 3, "A4": 4, "A5": 5, "A6": 6, "A7": 7, "A8": 8, "A9": 9, "A10": 10},
	})
	p.DefineEnum(vit.Enumeration{
		Embedded: true,
		Name:     "Orientation",
		Position: nil,
		Values:   map[string]int{"Portrait": 0, "Landscape": 1},
	})
	// add child components

	context.RegisterComponent("", p)

	return p
}

func (p *PageComponent) String() string {
	return fmt.Sprintf("PageComponent(%s)", p.id)
}

func (p *PageComponent) Property(key string) (vit.Value, bool) {
	switch key {
	case "format":
		return &p.format, true
	case "orientation":
		return &p.orientation, true
	case "color":
		return &p.color, true
	default:
		return p.Item.Property(key)
	}
}

func (p *PageComponent) MustProperty(key string) vit.Value {
	v, ok := p.Property(key)
	if !ok {
		panic(fmt.Errorf("MustProperty called with unknown key %q", key))
	}
	return v
}

func (p *PageComponent) SetProperty(key string, value interface{}) error {
	var err error
	switch key {
	case "format":
		err = p.format.SetValue(value)
	case "orientation":
		err = p.orientation.SetValue(value)
	case "color":
		err = p.color.SetValue(value)
	default:
		return p.Item.SetProperty(key, value)
	}
	if err != nil {
		return vit.NewPropertyError("PageComponent", key, p.id, err)
	}
	return nil
}

func (p *PageComponent) SetPropertyCode(key string, code vit.Code) error {
	switch key {
	case "format":
		p.format.SetCode(code)
	case "orientation":
		p.orientation.SetCode(code)
	case "color":
		p.color.SetCode(code)
	default:
		return p.Item.SetPropertyCode(key, code)
	}
	return nil
}

func (p *PageComponent) Event(name string) (vit.Listenable, bool) {
	switch name {
	default:
		return p.Item.Event(name)
	}
}

func (p *PageComponent) ResolveVariable(key string) (interface{}, bool) {
	switch key {
	case "format":
		return &p.format, true
	case "orientation":
		return &p.orientation, true
	case "color":
		return &p.color, true
	default:
		return p.Item.ResolveVariable(key)
	}
}

func (p *PageComponent) AddChild(child vit.Component) {
	child.SetParent(p)
	p.AddChildButKeepParent(child)
}

func (p *PageComponent) AddChildAfter(afterThis vit.Component, addThis vit.Component) {
	var targetType vit.Component = afterThis

	for ind, child := range p.Children() {
		if child.As(&targetType) {
			addThis.SetParent(p)
			p.AddChildAtButKeepParent(addThis, ind+1)
			return
		}
	}
	p.AddChild(addThis)
}

func (p *PageComponent) UpdateExpressions(context vit.Component) (int, vit.ErrorGroup) {
	var sum int
	var errs vit.ErrorGroup

	if context == nil {
		context = p
	}
	// properties
	if changed, err := p.format.Update(context); changed || err != nil {
		sum++
		if err != nil {
			errs.Add(vit.NewPropertyError("PageComponent", "format", p.id, err))
		}
	}
	if changed, err := p.orientation.Update(context); changed || err != nil {
		sum++
		if err != nil {
			errs.Add(vit.NewPropertyError("PageComponent", "orientation", p.id, err))
		}
	}
	if changed, err := p.color.Update(context); changed || err != nil {
		sum++
		if err != nil {
			errs.Add(vit.NewPropertyError("PageComponent", "color", p.id, err))
		}
	}

	// methods

	n, err := p.Item.UpdateExpressions(context)
	sum += n
	errs.AddGroup(err)
	return sum, errs
}

func (p *PageComponent) As(target *vit.Component) bool {
	if _, ok := (*target).(*PageComponent); ok {
		*target = p
		return true
	}
	return p.Item.As(target)
}

func (p *PageComponent) ID() string {
	return p.id
}

func (p *PageComponent) Finish() error {
	return p.RootC().FinishInContext(p)
}

func (p *PageComponent) staticAttribute(name string) (interface{}, bool) {
	switch name {
	case "A0":
		return uint(PageComponent_Format_A0), true
	case "A1":
		return uint(PageComponent_Format_A1), true
	case "A2":
		return uint(PageComponent_Format_A2), true
	case "A3":
		return uint(PageComponent_Format_A3), true
	case "A4":
		return uint(PageComponent_Format_A4), true
	case "A5":
		return uint(PageComponent_Format_A5), true
	case "A6":
		return uint(PageComponent_Format_A6), true
	case "A7":
		return uint(PageComponent_Format_A7), true
	case "A8":
		return uint(PageComponent_Format_A8), true
	case "A9":
		return uint(PageComponent_Format_A9), true
	case "A10":
		return uint(PageComponent_Format_A10), true
	case "Portrait":
		return uint(PageComponent_Orientation_Portrait), true
	case "Landscape":
		return uint(PageComponent_Orientation_Landscape), true
	default:
		return nil, false
	}
}

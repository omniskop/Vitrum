// Code generated by vitrum gencmd. DO NOT EDIT.

package vit

import "fmt"

type Rectangle struct {
	Item
	id string

	color  *ColorValue
	radius *FloatValue
}

func NewRectangle(id string, scope ComponentContainer) *Rectangle {
	return &Rectangle{
		Item:   *NewItem(id, scope),
		id:     id,
		color:  NewColorValue("Vit.RGB(0, 0, 0)", nil),
		radius: NewFloatValue("5", nil),
	}
}

func (r *Rectangle) String() string {
	return fmt.Sprintf("Rectangle{%s}", r.id)
}

func (r *Rectangle) Property(key string) (Value, bool) {
	switch key {
	case "color":
		return r.color, true
	case "radius":
		return r.radius, true
	default:
		return r.Item.Property(key)
	}
}

func (r *Rectangle) MustProperty(key string) Value {
	v, ok := r.Property(key)
	if !ok {
		panic(fmt.Errorf("MustProperty called with unknown key %q", key))
	}
	return v
}

func (r *Rectangle) SetProperty(key string, value interface{}, position *PositionRange) bool {
	switch key {
	case "color":
		r.color.ChangeCode(value.(string), position)
	case "radius":
		r.radius.ChangeCode(value.(string), position)
	default:
		return r.Item.SetProperty(key, value, position)
	}
	return true
}

func (r *Rectangle) ResolveVariable(key string) (interface{}, bool) {
	switch key {
	case r.id:
		return r, true
	case "color":
		return r.color, true
	case "radius":
		return r.radius, true
	default:
		return r.Item.ResolveVariable(key)
	}
}

func (r *Rectangle) AddChild(child Component) {
	child.SetParent(r)
	r.AddChildButKeepParent(child)
}

func (r *Rectangle) UpdateExpression() (int, ErrorGroup) {
	var sum int
	var errs ErrorGroup

	if r.color.ShouldEvaluate() {
		sum++
		err := r.color.Update(r)
		if err != nil {
			errs.Add(NewExpressionError("Rectangle", "color", r.id, r.color.Expression, err))
		}
	}
	if r.radius.ShouldEvaluate() {
		sum++
		err := r.radius.Update(r)
		if err != nil {
			errs.Add(NewExpressionError("Rectangle", "radius", r.id, r.radius.Expression, err))
		}
	}

	// this needs to be done in every component and not just in root to give the expression the highest level component for resolving variables
	n, err := r.UpdatePropertiesInContext(r)
	sum += n
	errs.AddGroup(err)
	n, err = r.Item.UpdateExpressions()
	sum += n
	errs.AddGroup(err)
	return sum, errs
}

func (r *Rectangle) ID() string {
	return r.id
}

func (r *Rectangle) finish() error {
	return r.RootC().FinishInContext(r)
}

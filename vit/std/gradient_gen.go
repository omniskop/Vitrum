// Code generated by vitrum gencmd. DO NOT EDIT.

package std

import (
	"fmt"
	vit "github.com/omniskop/vitrum/vit"
	parse "github.com/omniskop/vitrum/vit/parse"
)

func newFileContextForGradient(globalCtx *vit.GlobalContext) (*vit.FileContext, error) {
	return vit.NewFileContext(globalCtx), nil
}

type Gradient struct {
	*Item
	id string
}

// newGradientInGlobal creates an appropriate file context for the component and then returns a new Gradient instance.
// The returned error will only be set if a library import that is required by the component fails.
func newGradientInGlobal(id string, globalCtx *vit.GlobalContext, thisLibrary parse.Library) (*Gradient, error) {
	fileCtx, err := newFileContextForGradient(globalCtx)
	if err != nil {
		return nil, err
	}
	parse.AddLibraryToContainer(thisLibrary, &fileCtx.KnownComponents)
	return NewGradient(id, fileCtx), nil
}
func NewGradient(id string, context *vit.FileContext) *Gradient {
	g := &Gradient{
		Item: NewItem("", context),
		id:   id,
	}
	// property assignments on embedded components
	// register listeners for when a property changes
	// register event listeners
	// register enumerations
	// add child components

	context.RegisterComponent("", g)

	return g
}

func (g *Gradient) String() string {
	return fmt.Sprintf("Gradient(%s)", g.id)
}

func (g *Gradient) Property(key string) (vit.Value, bool) {
	switch key {
	default:
		return g.Item.Property(key)
	}
}

func (g *Gradient) MustProperty(key string) vit.Value {
	v, ok := g.Property(key)
	if !ok {
		panic(fmt.Errorf("MustProperty called with unknown key %q", key))
	}
	return v
}

func (g *Gradient) SetProperty(key string, value interface{}) error {
	var err error
	switch key {
	default:
		return g.Item.SetProperty(key, value)
	}
	if err != nil {
		return vit.NewPropertyError("Gradient", key, g.id, err)
	}
	return nil
}

func (g *Gradient) SetPropertyCode(key string, code vit.Code) error {
	switch key {
	default:
		return g.Item.SetPropertyCode(key, code)
	}
	return nil
}

func (g *Gradient) Event(name string) (vit.Listenable, bool) {
	switch name {
	default:
		return g.Item.Event(name)
	}
}

func (g *Gradient) ResolveVariable(key string) (interface{}, bool) {
	switch key {
	default:
		return g.Item.ResolveVariable(key)
	}
}

func (g *Gradient) AddChild(child vit.Component) {
	child.SetParent(g)
	g.AddChildButKeepParent(child)
}

func (g *Gradient) AddChildAfter(afterThis vit.Component, addThis vit.Component) {
	var targetType vit.Component = afterThis

	for ind, child := range g.Children() {
		if child.As(&targetType) {
			addThis.SetParent(g)
			g.AddChildAtButKeepParent(addThis, ind+1)
			return
		}
	}
	g.AddChild(addThis)
}

func (g *Gradient) UpdateExpressions(context vit.Component) (int, vit.ErrorGroup) {
	var sum int
	var errs vit.ErrorGroup

	if context == nil {
		context = g
	}
	// properties

	// methods

	n, err := g.Item.UpdateExpressions(context)
	sum += n
	errs.AddGroup(err)
	return sum, errs
}

func (g *Gradient) As(target *vit.Component) bool {
	if _, ok := (*target).(*Gradient); ok {
		*target = g
		return true
	}
	return g.Item.As(target)
}

func (g *Gradient) ID() string {
	return g.id
}

func (g *Gradient) Finish() error {
	return g.RootC().FinishInContext(g)
}

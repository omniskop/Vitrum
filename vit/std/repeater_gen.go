// Code generated by vitrum gencmd. DO NOT EDIT.

package std

import (
	"fmt"
	vit "github.com/omniskop/vitrum/vit"
)

type Repeater struct {
	*Item
	id string

	count    vit.IntValue
	delegate vit.ComponentDefValue
	model    vit.AnyValue
	items    []RepeaterItem
}

func NewRepeater(id string, scope vit.ComponentContainer) *Repeater {
	r := &Repeater{
		Item:     NewItem(id, scope),
		id:       id,
		count:    *vit.NewEmptyIntValue(),
		delegate: *vit.NewEmptyComponentDefValue(),
		model:    *vit.NewEmptyAnyValue(),
		items:    []RepeaterItem{},
	}
	r.count.AddDependent(vit.FuncDep(r.evaluateInternals))
	r.delegate.AddDependent(vit.FuncDep(r.evaluateInternals))
	r.model.AddDependent(vit.FuncDep(r.evaluateInternals))
	return r
}

func (r *Repeater) String() string {
	return fmt.Sprintf("Repeater(%s)", r.id)
}

func (r *Repeater) Property(key string) (vit.Value, bool) {
	switch key {
	case "count":
		return &r.count, true
	case "delegate":
		return &r.delegate, true
	case "model":
		return &r.model, true
	default:
		return r.Item.Property(key)
	}
}

func (r *Repeater) MustProperty(key string) vit.Value {
	v, ok := r.Property(key)
	if !ok {
		panic(fmt.Errorf("MustProperty called with unknown key %q", key))
	}
	return v
}

func (r *Repeater) SetProperty(key string, value interface{}) error {
	var err error
	switch key {
	case "count":
		err = r.count.SetValue(value)
	case "delegate":
		err = r.delegate.SetValue(value)
	case "model":
		err = r.model.SetValue(value)
	default:
		return r.Item.SetProperty(key, value)
	}
	if err != nil {
		return vit.NewPropertyError("Repeater", key, r.id, err)
	}
	return nil
}

func (r *Repeater) SetPropertyExpression(key string, code string, pos *vit.PositionRange) error {
	switch key {
	case "count":
		r.count.SetExpression(code, pos)
	case "delegate":
		r.delegate.SetExpression(code, pos)
	case "model":
		r.model.SetExpression(code, pos)
	default:
		return r.Item.SetPropertyExpression(key, code, pos)
	}
	return nil
}

func (r *Repeater) ResolveVariable(key string) (interface{}, bool) {
	switch key {
	case r.id:
		return r, true
	case "count":
		return &r.count, true
	case "delegate":
		return &r.delegate, true
	case "model":
		return &r.model, true
	default:
		return r.Item.ResolveVariable(key)
	}
}

func (r *Repeater) AddChild(child vit.Component) {
	child.SetParent(r)
	r.AddChildButKeepParent(child)
}

func (r *Repeater) AddChildAfter(afterThis vit.Component, addThis vit.Component) {
	var targetType vit.Component = afterThis

	for ind, child := range r.Children() {
		if child.As(&targetType) {
			addThis.SetParent(r)
			r.AddChildAtButKeepParent(addThis, ind+1)
			return
		}
	}
	r.AddChild(addThis)
}

func (r *Repeater) UpdateExpressions() (int, vit.ErrorGroup) {
	var sum int
	var errs vit.ErrorGroup

	if changed, err := r.count.Update(r); changed || err != nil {
		sum++
		if err != nil {
			errs.Add(vit.NewPropertyError("Repeater", "count", r.id, err))
		}
	}
	if changed, err := r.delegate.Update(r); changed || err != nil {
		sum++
		if err != nil {
			errs.Add(vit.NewPropertyError("Repeater", "delegate", r.id, err))
		}
	}
	if changed, err := r.model.Update(r); changed || err != nil {
		sum++
		if err != nil {
			errs.Add(vit.NewPropertyError("Repeater", "model", r.id, err))
		}
	}

	// this needs to be done in every component and not just in root to give the expression the highest level component for resolving variables
	n, err := r.UpdatePropertiesInContext(r)
	sum += n
	errs.AddGroup(err)
	n, err = r.Item.UpdateExpressions()
	sum += n
	errs.AddGroup(err)
	return sum, errs
}

func (r *Repeater) As(target *vit.Component) bool {
	if _, ok := (*target).(*Repeater); ok {
		*target = r
		return true
	}
	return r.Item.As(target)
}

func (r *Repeater) ID() string {
	return r.id
}

func (r *Repeater) Finish() error {
	return r.RootC().FinishInContext(r)
}
